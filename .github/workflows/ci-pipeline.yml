name: CI Pipeline - Testing Branch

on:
  push:
    branches: [testing]

jobs:
  test-backend-services:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd="pg_isready -U postgres -d postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    strategy:
      matrix:
        service: [customer_service, order_service, product_service]

    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Create databases if they don't exist
        run: |
          psql postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'customers'" | grep -q 1 || psql postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/postgres -c "CREATE DATABASE customers;"
          psql postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'orders'" | grep -q 1 || psql postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/postgres -c "CREATE DATABASE orders;"
          psql postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'products'" | grep -q 1 || psql postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/postgres -c "CREATE DATABASE products;"

      - name: Install dependencies for ${{ matrix.service }}
        run: |
          cd backend/${{ matrix.service }}
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Set DATABASE_URL for service
        run: |
          if [ "${{ matrix.service }}" = "customer_service" ]; then
            export DATABASE_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/customers
          elif [ "${{ matrix.service }}" = "order_service" ]; then
            export DATABASE_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/orders
          elif [ "${{ matrix.service }}" = "product_service" ]; then
            export DATABASE_URL=postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$POSTGRES_HOST:$POSTGRES_PORT/products
          fi
          echo "DATABASE_URL=$DATABASE_URL" >> $GITHUB_ENV

      - name: Run tests for ${{ matrix.service }}
        run: |
          cd backend/${{ matrix.service }}
          python -m pytest tests/ -v

  build-and-push:
    needs: test-backend-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [customer_service, order_service, product_service] # Removed frontend from the matrix

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: |
          echo ${{ secrets.ACR_PASSWORD }} | docker login ${{ secrets.ACR_LOGIN_SERVER }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

      - name: Build and push ${{ matrix.service }} image
        run: |
          cd backend/${{ matrix.service }}  # Removed frontend condition since we only handle backend services now

          # Build and tag with commit SHA
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ matrix.service }}:${{ github.sha }} .
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ matrix.service }}:${{ github.sha }}

          # Also tag and push as 'latest' for production deployment
          docker tag ${{ secrets.ACR_LOGIN_SERVER }}/${{ matrix.service }}:${{ github.sha }} ${{ secrets.ACR_LOGIN_SERVER }}/${{ matrix.service }}:latest
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ matrix.service }}:latest

          echo "âœ… Built and pushed ${{ matrix.service }} with tags: ${{ github.sha }} and latest"
