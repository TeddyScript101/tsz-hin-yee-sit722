name: Stage 3 - Production Deployment

on:
  push:
    branches:
      - main # ‚úÖ Trigger only when PR is merged into main

jobs:
  production-deployment:
    runs-on: ubuntu-latest

    env:
      RESOURCE_GROUP: teddysit722Week10
      AKS_NAME: aksteddy722Week10
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      IMAGE_TAG: ${{ github.sha }} # ‚úÖ Deploy the exact commit
      PROD_NAMESPACE: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Connect to AKS
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME
          kubectl cluster-info

      - name: Ensure Production Namespace
        run: |
          kubectl create namespace $PROD_NAMESPACE || echo "Namespace exists"

      - name: Deploy Infrastructure (ConfigMaps, Secrets, Databases, RabbitMQ)
        run: |
          echo "üèóÔ∏è Deploying infrastructure components"

          # Deploy ConfigMaps and Secrets
          kubectl apply -f k8s/configmaps.yaml -n $PROD_NAMESPACE
          kubectl apply -f k8s/secrets.yaml -n $PROD_NAMESPACE

          # Deploy databases
          kubectl apply -f k8s/customer-db.yaml -n $PROD_NAMESPACE
          kubectl apply -f k8s/order-db.yaml -n $PROD_NAMESPACE
          kubectl apply -f k8s/product-db.yaml -n $PROD_NAMESPACE

          # Deploy RabbitMQ
          kubectl apply -f k8s/rabbitmq.yaml -n $PROD_NAMESPACE

          echo "‚úÖ Infrastructure deployed"

      - name: Wait for Infrastructure
        run: |
          echo "‚è≥ Waiting for infrastructure to be ready"

          # Wait for database deployments
          kubectl rollout status deployment/customer-db-deployment-w10-aks -n $PROD_NAMESPACE --timeout=300s
          kubectl rollout status deployment/order-db-deployment-w10-aks -n $PROD_NAMESPACE --timeout=300s
          kubectl rollout status deployment/product-db-deployment-w10-aks -n $PROD_NAMESPACE --timeout=300s
          kubectl rollout status deployment/rabbitmq-deployment-w10-aks -n $PROD_NAMESPACE --timeout=300s

          echo "‚úÖ Infrastructure ready"

      - name: Deploy Backend Services
        run: |
          for service in customer_service order_service product_service; do
            K8S_NAME=$(echo $service | sed 's/_/-/g')
            K8S_FILE="${K8S_NAME}-service.yaml"
            echo "üì¶ Deploying $service using $K8S_FILE"
            
            # Apply manifests - your files are named like customer-service.yaml, order-service.yaml, etc.
            if [ -f "k8s/$K8S_FILE" ]; then
              # Replace image tag in the YAML and apply
              sed "s|teddyacr722week10.azurecr.io|$ACR_LOGIN_SERVER|g; s|\${IMAGE_TAG}|$IMAGE_TAG|g" k8s/$K8S_FILE \
                | kubectl apply -n $PROD_NAMESPACE -f -
            else
              echo "‚ö†Ô∏è File k8s/$K8S_FILE not found, creating deployment manually"
              kubectl create deployment $K8S_NAME \
                --image=$ACR_LOGIN_SERVER/$service:$IMAGE_TAG \
                -n $PROD_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
              kubectl expose deployment $K8S_NAME \
                --port=80 --target-port=80 \
                --name=${K8S_NAME}-service \
                -n $PROD_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
            fi

            # Ensure proper label for health checks (using actual deployment names from your YAML files)
            kubectl label deployment ${K8S_NAME}-w10-aks app=${K8S_NAME} -n $PROD_NAMESPACE --overwrite || echo "Label applied or deployment not found"

            # Update image safely
            kubectl set image deployment/${K8S_NAME}-w10-aks *=$ACR_LOGIN_SERVER/$service:$IMAGE_TAG -n $PROD_NAMESPACE || echo "Image update attempted"

            echo "‚úÖ $service deployment processed"
          done

      - name: Deploy Frontend
        run: |
          echo "üì¶ Deploying frontend"
          if [ -f "k8s/frontend.yaml" ]; then
            # Replace image tag in the YAML and apply
            sed "s|teddyacr722week10.azurecr.io|$ACR_LOGIN_SERVER|g; s|\${IMAGE_TAG}|$IMAGE_TAG|g" k8s/frontend.yaml \
              | kubectl apply -n $PROD_NAMESPACE -f -
          else
            kubectl create deployment frontend --image=$ACR_LOGIN_SERVER/frontend:$IMAGE_TAG -n $PROD_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
            kubectl expose deployment frontend --port=80 --target-port=80 --name=frontend-service -n $PROD_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          fi
          kubectl set image deployment/frontend-w10-aks *=$ACR_LOGIN_SERVER/frontend:$IMAGE_TAG -n $PROD_NAMESPACE
          kubectl label deployment frontend-w10-aks app=frontend -n $PROD_NAMESPACE --overwrite
          echo "‚úÖ Frontend deployed and labeled"

      - name: Wait for Application Deployments
        run: |
          echo "‚è≥ Waiting for application deployments"

          # Wait for backend services
          kubectl rollout status deployment/customer-service-w10-aks -n $PROD_NAMESPACE --timeout=300s
          kubectl rollout status deployment/order-service-w10-aks -n $PROD_NAMESPACE --timeout=300s
          kubectl rollout status deployment/product-service-w10-aks -n $PROD_NAMESPACE --timeout=300s

          # Wait for frontend
          kubectl rollout status deployment/frontend-w10-aks -n $PROD_NAMESPACE --timeout=300s

          echo "‚úÖ All deployments ready"

      - name: Run Production Health Checks
        run: |
          echo "üß™ Running production health checks..."

          # Check if all pods are running
          kubectl get pods -n $PROD_NAMESPACE

          # Wait for all pods to be ready
          kubectl wait --for=condition=ready pod --all -n $PROD_NAMESPACE --timeout=300s

          echo "‚úÖ All pods are healthy"

      - name: Display Service Information
        run: |
          echo "üìã Production deployment summary:"
          kubectl get services -n $PROD_NAMESPACE
          kubectl get deployments -n $PROD_NAMESPACE
          echo "‚úÖ Production deployment completed successfully!"
