name: Stage 3 - Production Deployment

on:
  push:
    branches:
      - main # Triggered when PR is merged into main

jobs:
  deploy-production:
    runs-on: ubuntu-latest

    env:
      RESOURCE_GROUP: teddysit722Week10
      AKS_NAME: aksteddy722Week10
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      IMAGE_TAG: ${{ github.sha }} # Commit SHA of merged PR

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Connect to AKS
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME
          kubectl cluster-info

      - name: Ensure Production Namespace Exists
        run: |
          kubectl get namespace production || kubectl create namespace production
          echo "‚úÖ Production namespace ready"

      - name: Deploy Backend Services
        run: |
          for service in customer_service order_service product_service; do
            K8S_NAME=$(echo $service | sed 's/_/-/g')
            echo "üì¶ Deploying $service as $K8S_NAME"

            if [ -d "k8s/$service" ]; then
              kubectl apply -f k8s/$service/ -n production
            else
              kubectl create deployment $K8S_NAME \
                --image=$ACR_LOGIN_SERVER/$service:$IMAGE_TAG \
                -n production --dry-run=client -o yaml | kubectl apply -f -
              kubectl expose deployment $K8S_NAME \
                --port=80 --target-port=80 \
                --name=${K8S_NAME}-service \
                -n production --dry-run=client -o yaml | kubectl apply -f -
            fi

            # Ensure deployment has correct app label
            kubectl label deployment $K8S_NAME app=$K8S_NAME -n production --overwrite

            # Update image if deployment exists
            kubectl set image deployment/$K8S_NAME $K8S_NAME=$ACR_LOGIN_SERVER/$service:$IMAGE_TAG -n production || echo "$K8S_NAME not found"

            echo "‚úÖ $service deployment completed"
          done

      - name: Deploy Frontend
        run: |
          echo "üì¶ Deploying frontend"
          if [ -d "k8s/frontend" ]; then
            kubectl apply -f k8s/frontend/ -n production
          else
            kubectl create deployment frontend --image=$ACR_LOGIN_SERVER/frontend:$IMAGE_TAG -n production --dry-run=client -o yaml | kubectl apply -f -
            kubectl expose deployment frontend --port=80 --target-port=80 --name=frontend-service -n production --dry-run=client -o yaml | kubectl apply -f -
          fi
          kubectl set image deployment/frontend frontend=$ACR_LOGIN_SERVER/frontend:$IMAGE_TAG -n production || echo "frontend not found"
          kubectl label deployment frontend app=frontend -n production --overwrite
          echo "‚úÖ Frontend deployment completed"

      - name: Wait for All Deployments
        run: |
          DEPLOYMENTS=$(kubectl get deployments -n production -o jsonpath='{.items[*].metadata.name}')
          for dep in $DEPLOYMENTS; do
            echo "Waiting for $dep"
            kubectl rollout status deployment/$dep -n production --timeout=300s
            echo "‚úÖ $dep ready"
          done

      - name: Display Production Environment Status
        run: |
          echo "Deployments:"
          kubectl get deployments -n production -o wide
          echo "Services:"
          kubectl get services -n production -o wide
          echo "Pods:"
          kubectl get pods -n production -o wide

      - name: Run Production Health Checks
        run: |
          echo "üß™ Running production health checks..."

          # Frontend test via port-forward
          FRONTEND_SERVICE="frontend-service"
          kubectl port-forward service/$FRONTEND_SERVICE 8080:80 -n production &
          PF_PID=$!
          sleep 10
          if curl -f -s http://localhost:8080 >/dev/null 2>&1; then
            echo "‚úÖ Frontend responding"
          else
            echo "‚ö†Ô∏è Frontend not responding"
          fi
          kill $PF_PID 2>/dev/null || true

          # Backend pods ready check
          BACKENDS=("customer-service" "order-service" "product-service")
          for svc in "${BACKENDS[@]}"; do
            K8S_NAME=$(echo $svc | sed 's/_/-/g')
            POD=$(kubectl get pods -n production -l app=$K8S_NAME -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
            if [ -n "$POD" ]; then
              kubectl wait --for=condition=ready pod/$POD -n production --timeout=120s
              echo "‚úÖ $svc pod is ready"
            else
              echo "‚ö†Ô∏è $svc pod not found"
            fi
          done

      - name: Production Deployment Summary
        run: |
          echo "Namespace: production"
          echo "Images deployed: customer-service:$IMAGE_TAG, order-service:$IMAGE_TAG, product-service:$IMAGE_TAG, frontend:$IMAGE_TAG"
          echo "‚úÖ Production deployment and testing completed"
