name: Stage 3 - Production Deployment

on:
  push:
    branches:
      - main # ‚úÖ Triggers only when PR is merged into main

jobs:
  production-deployment:
    runs-on: ubuntu-latest

    env:
      RESOURCE_GROUP: teddysit722Week10
      AKS_NAME: aksteddy722Week10
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      IMAGE_TAG: ${{ github.sha }} # ‚úÖ Ensures we deploy the merged commit
      PROD_NAMESPACE: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Connect to AKS
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME
          kubectl cluster-info

      - name: Ensure Production Namespace
        run: |
          kubectl create namespace $PROD_NAMESPACE || echo "Namespace exists"

      - name: Deploy Backend Services
        run: |
          for service in customer_service order_service product_service; do
            K8S_NAME=$(echo $service | sed 's/_/-/g')
            echo "üì¶ Deploying $service as $K8S_NAME"

            if [ -d "k8s/$service" ]; then
              kubectl apply -f k8s/$service/ -n $PROD_NAMESPACE
            else
              kubectl create deployment $K8S_NAME \
                --image=$ACR_LOGIN_SERVER/$service:$IMAGE_TAG \
                -n $PROD_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
              kubectl expose deployment $K8S_NAME \
                --port=80 --target-port=80 \
                --name=${K8S_NAME}-service \
                -n $PROD_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
            fi

            kubectl label deployment $K8S_NAME app=$K8S_NAME -n $PROD_NAMESPACE --overwrite
            kubectl set image deployment/$K8S_NAME *=$ACR_LOGIN_SERVER/$service:$IMAGE_TAG -n $PROD_NAMESPACE || echo "‚ö†Ô∏è $K8S_NAME not updated"
            echo "‚úÖ $service deployed"
          done

      - name: Deploy Frontend
        run: |
          echo "üì¶ Deploying frontend"
          if [ -d "k8s/frontend" ]; then
            kubectl apply -f k8s/frontend/ -n $PROD_NAMESPACE
          else
            kubectl create deployment frontend \
              --image=$ACR_LOGIN_SERVER/frontend:$IMAGE_TAG \
              -n $PROD_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
            kubectl expose deployment frontend \
              --port=80 --target-port=80 \
              --name=frontend-service \
              -n $PROD_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          fi

          kubectl set image deployment/frontend *=$ACR_LOGIN_SERVER/frontend:$IMAGE_TAG -n $PROD_NAMESPACE
          kubectl label deployment frontend app=frontend -n $PROD_NAMESPACE --overwrite
          echo "‚úÖ Frontend deployed"

      - name: Wait for Deployments
        run: |
          DEPLOYMENTS=$(kubectl get deployments -n $PROD_NAMESPACE -o jsonpath='{.items[*].metadata.name}')
          for dep in $DEPLOYMENTS; do
            echo "‚è≥ Waiting for $dep rollout..."
            kubectl rollout status deployment/$dep -n $PROD_NAMESPACE --timeout=300s
            echo "‚úÖ $dep ready"
          done
