name: Stage 3 - Production Deployment

on:
  push:
    branches:
      - main

jobs:
  production-deployment:
    runs-on: ubuntu-latest

    env:
      RESOURCE_GROUP: teddysit722Week10
      AKS_NAME: aksteddy722Week10
      ACR_NAME: teddysit722week10
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      IMAGE_TAG: latest # Use a stable tag for production
      PROD_NAMESPACE: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Connect to AKS
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME
          kubectl cluster-info
          # Attach ACR to AKS to ensure image pull works
          az aks update -g $RESOURCE_GROUP -n $AKS_NAME --attach-acr $ACR_NAME || echo "ACR already attached"

      - name: Confirm Images Exist in ACR
        run: |
          for svc in customer_service order_service product_service frontend; do
            echo "Checking $svc:$IMAGE_TAG in ACR..."
            az acr repository show-tags --name $ACR_NAME --repository $svc --output table | grep $IMAGE_TAG || \
            { echo "‚ùå $svc:$IMAGE_TAG not found in ACR"; exit 1; }
          done

      - name: Create Production Namespace if not exists
        run: |
          kubectl create namespace $PROD_NAMESPACE || echo "Namespace exists"

      - name: Deploy Backend Services
        run: |
          for service in customer_service order_service product_service; do
            K8S_NAME=$(echo $service | sed 's/_/-/g')
            echo "üì¶ Deploying $service as $K8S_NAME to production"

            if [ -d "k8s/$service" ]; then
              kubectl apply -f k8s/$service/ -n $PROD_NAMESPACE
            else
              kubectl create deployment $K8S_NAME \
                --image=$ACR_LOGIN_SERVER/$service:$IMAGE_TAG \
                -n $PROD_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
              kubectl expose deployment $K8S_NAME \
                --port=80 --target-port=80 \
                --name=${K8S_NAME}-service \
                -n $PROD_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
            fi

            kubectl label deployment $K8S_NAME app=$K8S_NAME -n $PROD_NAMESPACE --overwrite
            kubectl set image deployment/$K8S_NAME *=$ACR_LOGIN_SERVER/$service:$IMAGE_TAG -n $PROD_NAMESPACE || true
            echo "‚úÖ $service deployed and labeled"
          done

      - name: Deploy Frontend
        run: |
          echo "üì¶ Deploying frontend to production"
          if [ -d "k8s/frontend" ]; then
            kubectl apply -f k8s/frontend/ -n $PROD_NAMESPACE
          else
            kubectl create deployment frontend --image=$ACR_LOGIN_SERVER/frontend:$IMAGE_TAG -n $PROD_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
            kubectl expose deployment frontend --port=80 --target-port=80 --name=frontend-service -n $PROD_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          fi
          kubectl set image deployment/frontend *=$ACR_LOGIN_SERVER/frontend:$IMAGE_TAG -n $PROD_NAMESPACE || true
          kubectl label deployment frontend app=frontend -n $PROD_NAMESPACE --overwrite
          echo "‚úÖ Frontend deployed and labeled"

      - name: Wait for Deployments
        run: |
          DEPLOYMENTS=$(kubectl get deployments -n $PROD_NAMESPACE -o jsonpath='{.items[*].metadata.name}')
          for dep in $DEPLOYMENTS; do
            kubectl rollout status deployment/$dep -n $PROD_NAMESPACE --timeout=600s
            echo "‚úÖ $dep ready"
          done

      - name: Run Production Tests
        run: |
          echo "üß™ Running production tests..."
          kubectl port-forward service/frontend-service 8080:80 -n $PROD_NAMESPACE &
          PF_PID=$!
          sleep 10
          curl -f -s http://localhost:8080 && echo "‚úÖ Frontend responding" || echo "‚ö†Ô∏è Frontend not responding"
          kill $PF_PID 2>/dev/null || true

          for svc in customer-service order-service product-service; do
            POD=$(kubectl get pods -n $PROD_NAMESPACE -l app=$svc -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
            if [ -n "$POD" ]; then
              kubectl wait --for=condition=ready pod/$POD -n $PROD_NAMESPACE --timeout=120s
              echo "‚úÖ $svc pod ready"
            else
              echo "‚ö†Ô∏è $svc pod not found"
            fi
          done
