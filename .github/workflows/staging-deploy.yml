name: Stage 2 - Staging Deployment

on:
  workflow_run:
    workflows: ["CI Pipeline - Testing Branch"]
    types:
      - completed
    branches:
      - testing

jobs:
  staging-deployment:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    env:
      RESOURCE_GROUP: teddysit722Week10
      AKS_NAME: aksteddy722Week10
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Connect to AKS
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME
          kubectl cluster-info

      - name: Create Staging Namespace
        run: |
          STAGING_NAMESPACE="staging-${{ github.run_id }}"
          kubectl create namespace $STAGING_NAMESPACE || echo "Namespace exists"
          echo "STAGING_NAMESPACE=$STAGING_NAMESPACE" >> $GITHUB_ENV

      # -------------------------------
      # Update image tags in YAML files
      # -------------------------------
      - name: Update Image Tags
        run: |
          # Update product service image
          sed -i 's|image: teddysit722hd.azurecr.io/product_service:latest|image: ${{ secrets.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}|g' k8s/product-service.yaml

          # Update order service image  
          sed -i 's|image: teddysit722hd.azurecr.io/order_service:latest|image: ${{ secrets.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}|g' k8s/order-service.yaml

          # Update customer service image
          sed -i 's|image: teddysit722hd.azurecr.io/customer_service:latest|image: ${{ secrets.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }}|g' k8s/customer-service.yaml

          # Update frontend image
          sed -i 's|image: teddysit722hd.azurecr.io/frontend:latest|image: ${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}|g' k8s/frontend.yaml

      - name: Deploy Frontend
        run: |
          kubectl apply -f k8s/frontend.yaml -n $STAGING_NAMESPACE
          kubectl rollout status deployment/frontend -n $STAGING_NAMESPACE --timeout=300s
          kubectl wait --for=condition=Ready pod -l app=frontend -n $STAGING_NAMESPACE --timeout=180s

      - name: Log Service Status
        run: |
          echo "üåê Checking service status in namespace $STAGING_NAMESPACE..."
          kubectl get svc -n $STAGING_NAMESPACE

          for svc in frontend product-service order-service customer-service; do
            TYPE=$(kubectl get svc $svc -n $STAGING_NAMESPACE -o jsonpath='{.spec.type}' 2>/dev/null || echo "NotFound")
            if [ "$TYPE" = "LoadBalancer" ]; then
              EXTERNAL_IP=$(kubectl get svc $svc -n $STAGING_NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
              echo "‚úÖ $svc LoadBalancer IP: $EXTERNAL_IP"
            else
              echo "‚ÑπÔ∏è $svc is $TYPE"
            fi
          done

      - name: Run Staging Tests
        run: |
          echo "üß™ Running staging tests..."

          # Test frontend
          kubectl port-forward service/frontend -n $STAGING_NAMESPACE 8080:80 &
          PF_PID=$!
          sleep 10

          if curl -f -s --max-time 10 http://localhost:8080 >/dev/null; then
            echo "‚úÖ Frontend responding"
          else
            echo "‚ùå Frontend not responding"
          fi

          kill $PF_PID 2>/dev/null || true

          # Verify all pods are ready
          for svc in customer-service order-service product-service frontend; do
            POD_COUNT=$(kubectl get pods -n $STAGING_NAMESPACE -l app=$svc --field-selector=status.phase=Running | grep -c $svc || echo "0")
            if [ "$POD_COUNT" -gt 0 ]; then
              echo "‚úÖ $svc pods running: $POD_COUNT"
            else
              echo "‚ö†Ô∏è No running pods found for $svc"
            fi
          done

      - name: Display Staging Status
        run: |
          echo "üìã Staging deployment summary for namespace: $STAGING_NAMESPACE"
          kubectl get services -n $STAGING_NAMESPACE
          kubectl get deployments -n $STAGING_NAMESPACE
          kubectl get pods -n $STAGING_NAMESPACE

      - name: Cleanup Staging Environment
        if: always()
        run: |
          echo "üßπ Cleaning up staging environment..."
          kubectl delete namespace $STAGING_NAMESPACE --ignore-not-found=true --timeout=60s
          echo "‚úÖ Staging cleaned up"
