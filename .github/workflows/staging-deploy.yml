name: Stage 2 - Staging Deployment

on:
  workflow_run:
    workflows: ["CI Pipeline - Testing Branch"]
    types:
      - completed
  workflow_dispatch: # This allows manual triggering
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"

jobs:
  staging-deployment:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest

    steps:
      - name: Debug Info
        run: |
          echo "Stage 2 triggered!"
          echo "Event: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "Triggered by workflow: ${{ github.event.workflow_run.name }}"
            echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
          fi

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Connect to AKS
        run: |
          az aks get-credentials \
            --resource-group teddysit722Week10 \
            --name aksteddy722Week10

      - name: Create Staging Namespace
        run: |
          NAMESPACE="staging-${{ github.run_id }}"
          kubectl create namespace $NAMESPACE || echo "Namespace already exists"
          echo "Created staging namespace: $NAMESPACE"

      - name: Deploy Test Application
        run: |
          NAMESPACE="staging-${{ github.run_id }}"

          # Create a simple test deployment
          kubectl create deployment test-app --image=nginx:latest -n $NAMESPACE
          kubectl expose deployment test-app --port=80 --target-port=80 -n $NAMESPACE

          # Wait for deployment
          kubectl rollout status deployment/test-app -n $NAMESPACE --timeout=300s

      - name: Test Deployment
        run: |
          NAMESPACE="staging-${{ github.run_id }}"

          echo "Testing deployment in namespace: $NAMESPACE"
          kubectl get pods -n $NAMESPACE
          kubectl get services -n $NAMESPACE

          # Test connectivity
          kubectl port-forward service/test-app 8080:80 -n $NAMESPACE &
          PID=$!
          sleep 10
          curl -f http://localhost:8080 || echo "Test completed"
          kill $PID || true

      - name: Cleanup
        if: always()
        run: |
          NAMESPACE="staging-${{ github.run_id }}"
          kubectl delete namespace $NAMESPACE --ignore-not-found=true
          echo "Cleanup completed for $NAMESPACE"
