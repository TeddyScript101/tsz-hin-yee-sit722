name: Stage 2 - Staging Deployment

on:
  workflow_run:
    workflows: ["CI Pipeline - Testing Branch"]
    types:
      - completed
    branches:
      - testing

jobs:
  staging-deployment:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    env:
      RESOURCE_GROUP: teddysit722Week10
      AKS_NAME: aksteddy722Week10
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
      STAGING_NAMESPACE: staging-${{ github.run_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Connect to AKS
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME --overwrite-existing
          kubectl cluster-info

      - name: Create Staging Namespace
        run: |
          kubectl create namespace $STAGING_NAMESPACE || echo "Namespace $STAGING_NAMESPACE exists"
          echo "STAGING_NAMESPACE=$STAGING_NAMESPACE" >> $GITHUB_ENV

      - name: Create ACR Pull Secret
        run: |
          kubectl create secret docker-registry acr-auth \
            --docker-server=${{ secrets.ACR_LOGIN_SERVER }} \
            --docker-username=${{ secrets.ACR_USERNAME }} \
            --docker-password=${{ secrets.ACR_PASSWORD }} \
            --namespace=$STAGING_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Update Service Types for Staging
        run: |
          sed -i 's/type: LoadBalancer/type: ClusterIP/g' k8s/product-service.yaml
          sed -i 's/type: LoadBalancer/type: ClusterIP/g' k8s/order-service.yaml  
          sed -i 's/type: LoadBalancer/type: ClusterIP/g' k8s/customer-service.yaml
          sed -i 's/type: LoadBalancer/type: ClusterIP/g' k8s/frontend.yaml

      - name: Apply ConfigMaps
        run: kubectl apply -f k8s/configmaps.yaml -n $STAGING_NAMESPACE

      - name: Apply Secrets
        run: kubectl apply -f k8s/secrets.yaml -n $STAGING_NAMESPACE

      # --- Databases ---
      - name: Deploy Product DB
        run: |
          kubectl apply -f k8s/product-db.yaml -n $STAGING_NAMESPACE
          kubectl rollout status deployment/product-db-deployment-w10-aks -n $STAGING_NAMESPACE --timeout=300s
          kubectl wait --for=condition=available deployment/product-db-deployment-w10-aks -n $STAGING_NAMESPACE --timeout=300s

      - name: Deploy Order DB
        run: |
          kubectl apply -f k8s/order-db.yaml -n $STAGING_NAMESPACE
          kubectl rollout status deployment/order-db-deployment-w10-aks -n $STAGING_NAMESPACE --timeout=300s
          kubectl wait --for=condition=available deployment/order-db-deployment-w10-aks -n $STAGING_NAMESPACE --timeout=300s

      - name: Deploy Customer DB
        run: |
          kubectl apply -f k8s/customer-db.yaml -n $STAGING_NAMESPACE
          kubectl rollout status deployment/customer-db-deployment-w10-aks -n $STAGING_NAMESPACE --timeout=300s
          kubectl wait --for=condition=available deployment/customer-db-deployment-w10-aks -n $STAGING_NAMESPACE --timeout=300s

      # --- RabbitMQ ---
      - name: Deploy RabbitMQ
        run: |
          kubectl apply -f k8s/rabbitmq.yaml -n $STAGING_NAMESPACE
          kubectl rollout status deployment/rabbitmq-deployment-w10-aks -n $STAGING_NAMESPACE --timeout=300s
          kubectl wait --for=condition=available deployment/rabbitmq-deployment-w10-aks -n $STAGING_NAMESPACE --timeout=300s
          kubectl get svc rabbitmq-service-w10-aks -n $STAGING_NAMESPACE

      # --- Services Deployment (Dynamic) ---
      - name: Deploy All Services
        run: |
          SERVICES=("product-service" "order-service" "customer-service")

          for SERVICE in "${SERVICES[@]}"; do
            DEPLOYMENT_NAME="${SERVICE//_/-}-w10-aks"   # convert underscores to dashes
            CONTAINER_NAME="${SERVICE//_/-}-container"
            IMAGE="${{ secrets.ACR_LOGIN_SERVER }}/$SERVICE:${{ env.IMAGE_TAG }}"

            kubectl apply -f k8s/$SERVICE.yaml -n $STAGING_NAMESPACE
            kubectl set image deployment/$DEPLOYMENT_NAME $CONTAINER_NAME=$IMAGE -n $STAGING_NAMESPACE
            kubectl rollout status deployment/$DEPLOYMENT_NAME -n $STAGING_NAMESPACE --timeout=300s
            kubectl wait --for=condition=available deployment/$DEPLOYMENT_NAME -n $STAGING_NAMESPACE --timeout=300s
          done

      # --- Frontend ---
      - name: Update Frontend Configuration for Cluster
        run: |
          FRONTEND_FILE=frontend/main.js
          sed -i "s|_PRODUCT_API_URL_|http://product-service-w10-aks:8000|g" "$FRONTEND_FILE"
          sed -i "s|_ORDER_API_URL_|http://order-service-w10-aks:8001|g" "$FRONTEND_FILE"
          sed -i "s|_CUSTOMER_API_URL_|http://customer-service-w10-aks:8002|g" "$FRONTEND_FILE"

      - name: Login to ACR
        run: |
          echo ${{ secrets.ACR_PASSWORD }} | docker login -u ${{ secrets.ACR_USERNAME }} --password-stdin ${{ secrets.ACR_LOGIN_SERVER }}

      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} frontend
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}

      - name: Deploy Frontend
        run: |
          IMAGE="${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}"
          kubectl apply -f k8s/frontend.yaml -n $STAGING_NAMESPACE
          kubectl set image deployment/frontend-w10-aks frontend-container=$IMAGE -n $STAGING_NAMESPACE
          kubectl rollout status deployment/frontend-w10-aks -n $STAGING_NAMESPACE --timeout=600s
          kubectl wait --for=condition=available deployment/frontend-w10-aks -n $STAGING_NAMESPACE --timeout=300s

      # --- Health Checks ---
      - name: Retry Health Checks for Services
        run: |
          SERVICES=(
            "product-service-w10-aks:8000"
            "order-service-w10-aks:8001"
            "customer-service-w10-aks:8002"
            "frontend-w10-aks:80"
          )

          for service in "${SERVICES[@]}"; do
            IFS=':' read -r svc port <<< "$service"
            name=${svc%-w10-aks}
            endpoint=$([ "$name" = "frontend" ] && echo "/" || echo "/health")
            RETRIES=5
            for i in $(seq 1 $RETRIES); do
              if curl -f -s --max-time 10 "http://$svc:$port$endpoint" >/dev/null 2>&1; then
                echo "‚úÖ $name is ready (attempt $i/$RETRIES)"
                break
              else
                echo "‚è≥ $name not ready (attempt $i/$RETRIES), retrying in 5s..."
                sleep 5
                if [ $i -eq $RETRIES ]; then
                  echo "‚ùå $name health check failed after $RETRIES attempts"
                  kubectl logs -l app=$name -n $STAGING_NAMESPACE --tail=20 || echo "No logs available"
                  exit 1
                fi
              fi
            done
          done

      # --- RabbitMQ Connectivity Check ---
      - name: Check RabbitMQ Status
        run: |
          echo "üîç Checking RabbitMQ pod..."
          kubectl get pod -l app=rabbitmq -n $STAGING_NAMESPACE
          echo "üìÑ Recent RabbitMQ logs:"
          kubectl logs -l app=rabbitmq -n $STAGING_NAMESPACE --tail=20

          echo "üîç Testing RabbitMQ connectivity from Order Service..."
          ORDER_POD=$(kubectl get pod -l app=order-service -n $STAGING_NAMESPACE -o jsonpath='{.items[0].metadata.name}')
          for i in {1..5}; do
            if kubectl exec $ORDER_POD -n $STAGING_NAMESPACE -- sh -c "nc -z rabbitmq-service-w10-aks 5672"; then
              echo "‚úÖ RabbitMQ port 5672 is reachable (attempt $i/5)"
              break
            else
              echo "‚è≥ RabbitMQ port 5672 not reachable (attempt $i/5), retrying in 5s..."
              sleep 5
              if [ $i -eq 5 ]; then
                echo "‚ùå RabbitMQ port 5672 not reachable after 5 attempts"
                kubectl logs -l app=rabbitmq -n $STAGING_NAMESPACE --tail=20
                exit 1
              fi
            fi
          done

      # --- Deployment Summary ---
      - name: Deployment Summary
        run: |
          echo "üéâ Staging Deployment Summary"
          echo "=============================="
          echo "Namespace: $STAGING_NAMESPACE"
          echo "Cluster: $AKS_NAME"
          echo "Image Tag: $IMAGE_TAG"
          echo ""
          echo "üì¶ Deployed Services:"
          kubectl get deployments -n $STAGING_NAMESPACE
          echo ""
          echo "üîó Services:"
          kubectl get svc -n $STAGING_NAMESPACE
          echo ""
          echo "‚úÖ All services deployed successfully to staging environment!"

      # --- Cleanup ---
      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up staging namespace..."
          kubectl delete pod -l app=quick-test -n $STAGING_NAMESPACE --ignore-not-found=true
          kubectl delete pod final-health-check -n $STAGING_NAMESPACE --ignore-not-found=true
          kubectl delete namespace $STAGING_NAMESPACE --ignore-not-found=true
