name: Stage 2 - Staging Deployment

on:
  workflow_run:
    workflows: ["CI Pipeline - Testing Branch"]
    types:
      - completed
    branches:
      - testing

jobs:
  staging-deployment:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    env:
      RESOURCE_GROUP: teddysit722Week10
      AKS_NAME: aksteddy722Week10
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}
      STAGING_NAMESPACE: staging-${{ github.run_id }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Connect to AKS
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME --overwrite-existing
          kubectl cluster-info

      - name: Create Staging Namespace
        run: |
          kubectl create namespace $STAGING_NAMESPACE || echo "Namespace $STAGING_NAMESPACE exists"
          echo "STAGING_NAMESPACE=$STAGING_NAMESPACE" >> $GITHUB_ENV

      - name: Create ACR Pull Secret
        run: |
          kubectl create secret docker-registry acr-auth \
            --docker-server=${{ secrets.ACR_LOGIN_SERVER }} \
            --docker-username=${{ secrets.ACR_USERNAME }} \
            --docker-password=${{ secrets.ACR_PASSWORD }} \
            --namespace=$STAGING_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -

      - name: Validate Azure Blob Storage Connectivity
        run: |
          echo "üîç Validating Azure Blob Storage connectivity..."
          az storage account show --name sit722teddy --resource-group $RESOURCE_GROUP --query "primaryEndpoints.blob" || {
            echo "‚ùå Failed to connect to Azure Blob Storage account 'sit722teddy'"
            exit 1
          }
          echo "‚úÖ Azure Blob Storage endpoint is accessible"

      - name: Update Service Types for Staging
        run: |
          sed -i 's/type: LoadBalancer/type: ClusterIP/g' k8s/product-service.yaml
          sed -i 's/type: LoadBalancer/type: ClusterIP/g' k8s/order-service.yaml  
          sed -i 's/type: LoadBalancer/type: ClusterIP/g' k8s/customer-service.yaml
          sed -i 's/type: LoadBalancer/type: ClusterIP/g' k8s/frontend.yaml

      - name: Apply ConfigMaps
        run: kubectl apply -f k8s/configmaps.yaml -n $STAGING_NAMESPACE

      - name: Apply Secrets
        run: kubectl apply -f k8s/secrets.yaml -n $STAGING_NAMESPACE

      - name: Deploy Product DB
        run: |
          kubectl apply -f k8s/product-db.yaml -n $STAGING_NAMESPACE
          kubectl rollout status deployment/product-db-deployment-w10-aks -n $STAGING_NAMESPACE --timeout=300s

      - name: Deploy Order DB
        run: |
          kubectl apply -f k8s/order-db.yaml -n $STAGING_NAMESPACE
          kubectl rollout status deployment/order-db-deployment-w10-aks -n $STAGING_NAMESPACE --timeout=300s

      - name: Deploy Customer DB
        run: |
          kubectl apply -f k8s/customer-db.yaml -n $STAGING_NAMESPACE
          kubectl rollout status deployment/customer-db-deployment-w10-aks -n $STAGING_NAMESPACE --timeout=300s

      - name: Deploy RabbitMQ
        run: |
          kubectl apply -f k8s/rabbitmq.yaml -n $STAGING_NAMESPACE
          kubectl rollout status deployment/rabbitmq-deployment-w10-aks -n $STAGING_NAMESPACE --timeout=300s
          echo "üîç Waiting for RabbitMQ service to be ready..."
          kubectl wait --for=condition=available deployment/rabbitmq-deployment-w10-aks -n $STAGING_NAMESPACE --timeout=300s
          kubectl get svc rabbitmq-service-w10-aks -n $STAGING_NAMESPACE

      - name: Deploy Product Service
        run: |
          kubectl apply -f k8s/product-service.yaml -n $STAGING_NAMESPACE
          kubectl rollout status deployment/product-service-w10-aks -n $STAGING_NAMESPACE --timeout=300s

      - name: Deploy Order Service
        run: |
          kubectl apply -f k8s/order-service.yaml -n $STAGING_NAMESPACE
          kubectl rollout status deployment/order-service-w10-aks -n $STAGING_NAMESPACE --timeout=300s

      - name: Deploy Customer Service
        run: |
          kubectl apply -f k8s/customer-service.yaml -n $STAGING_NAMESPACE
          kubectl rollout status deployment/customer-service-w10-aks -n $STAGING_NAMESPACE --timeout=300s

      - name: Update Frontend Configuration for Cluster
        run: |
          FRONTEND_FILE=frontend/main.js
          sed -i "s|_PRODUCT_API_URL_|http://product-service-w10-aks:8000|g" "$FRONTEND_FILE"
          sed -i "s|_ORDER_API_URL_|http://order-service-w10-aks:8001|g" "$FRONTEND_FILE"
          sed -i "s|_CUSTOMER_API_URL_|http://customer-service-w10-aks:8002|g" "$FRONTEND_FILE"

      - name: Login to ACR
        run: |
          echo ${{ secrets.ACR_PASSWORD }} | docker login -u ${{ secrets.ACR_USERNAME }} --password-stdin ${{ secrets.ACR_LOGIN_SERVER }}

      - name: Build and Push Frontend Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} frontend
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}

      - name: Deploy Frontend
        run: |
          kubectl apply -f k8s/frontend.yaml -n $STAGING_NAMESPACE
          kubectl set image deployment/frontend-w10-aks \
            frontend-container=${{ secrets.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }} \
            -n $STAGING_NAMESPACE
          kubectl rollout status deployment/frontend-w10-aks -n $STAGING_NAMESPACE --timeout=300s

      - name: Wait for Services and Test Internal Connectivity
        run: |
          echo "üîç Checking pod status..."
          kubectl get pods -n $STAGING_NAMESPACE -o wide

          echo "‚úÖ All pods are running. Proceeding with connectivity tests..."

          echo "üìä Verifying pod readiness..."
          ALL_READY=true
          PODS=$(kubectl get pods -n $STAGING_NAMESPACE -o jsonpath='{.items[*].metadata.name}')

          for pod in $PODS; do
            STATUS=$(kubectl get pod $pod -n $STAGING_NAMESPACE -o jsonpath='{.status.phase}')
            READY=$(kubectl get pod $pod -n $STAGING_NAMESPACE -o jsonpath='{.status.containerStatuses[0].ready}')
            if [ "$STATUS" = "Running" ] && [ "$READY" = "true" ]; then
              echo "‚úÖ $pod: $STATUS and ready=$READY"
            else
              echo "‚ùå $pod: $STATUS, ready=$READY"
              ALL_READY=false
            fi
          done

          if [ "$ALL_READY" = "true" ]; then
            echo "üéâ All pods are ready! Proceeding with tests..."
          else
            echo "‚ö†Ô∏è Some pods are not ready, but continuing with tests..."
          fi

          echo "üîç Testing internal service connectivity..."

          SERVICES=(
            "product-service-w10-aks:8000"
            "order-service-w10-aks:8001"
            "customer-service-w10-aks:8002"
            "frontend-w10-aks:80"
          )

          for service in "${SERVICES[@]}"; do
            IFS=':' read -r svc port <<< "$service"
            name=${svc%-w10-aks}
            endpoint=$([ "$name" = "frontend" ] && echo "/" || echo "/health")

            echo "üîç Testing $name..."
            if kubectl run quick-test-$name --image=curlimages/curl:latest --rm -i --restart=Never -n $STAGING_NAMESPACE -- \
              curl -f -s --max-time 15 "http://$svc:$port$endpoint" >/dev/null 2>&1; then
              echo "‚úÖ $name is reachable"
            else
              echo "‚ö†Ô∏è $name may not be fully ready yet"
              kubectl logs -l app=$name -n $STAGING_NAMESPACE --tail=20 2>/dev/null || echo "No logs available for $name"
            fi
          done

      - name: Test Service Health Endpoints
        run: |
          echo "üîç Testing service health endpoints..."

          SERVICES=(
            "product-service-w10-aks:8000:18000"
            "order-service-w10-aks:8001:18001"
            "customer-service-w10-aks:8002:18002"
            "frontend-w10-aks:80:18003"
          )

          for service in "${SERVICES[@]}"; do
            IFS=':' read -r svc target_port local_port <<< "$service"
            name=${svc%-w10-aks}
            endpoint=$([ "$name" = "frontend" ] && echo "/" || echo "/health")

            echo "üîç Testing $name..."

            kubectl port-forward svc/$svc $local_port:$target_port -n $STAGING_NAMESPACE --address=127.0.0.1 > /dev/null 2>&1 &
            PF_PID=$!

            sleep 5

            for i in {1..5}; do
              if curl -f -s --max-time 15 "http://localhost:$local_port$endpoint" >/dev/null 2>&1; then
                echo "‚úÖ $name health endpoint is working (attempt $i/5)"
                RESPONSE=$(curl -s "http://localhost:$local_port$endpoint" | head -c 100)
                echo "   Response: $RESPONSE"
                break
              else
                if [ $i -eq 5 ]; then
                  echo "‚ùå $name health endpoint failed after 5 attempts"
                  echo "üìÑ Last 20 lines of logs:"
                  kubectl logs -l app=$name -n $STAGING_NAMESPACE --tail=20 2>/dev/null || echo "No logs available for $name"
                else
                  echo "‚è≥ $name health endpoint not ready (attempt $i/5), retrying..."
                  sleep 5
                fi
              fi
            done

            kill $PF_PID 2>/dev/null || true
            sleep 2
          done

      - name: Check Service Logs for Errors
        run: |
          echo "üîç Checking service logs for errors..."

          PODS=$(kubectl get pods -n $STAGING_NAMESPACE -o jsonpath='{.items[*].metadata.name}')

          for pod in $PODS; do
            echo "--- Checking $pod for errors ---"
            kubectl logs $pod -n $STAGING_NAMESPACE --tail=50 | grep -i "error\|exception\|fail\|timeout" | head -5 || echo "No errors found in $pod"
          done

      - name: Final Health Check
        run: |
          echo "üîç Running final health checks..."

          kubectl run final-health-check --image=curlimages/curl:latest --rm -i --restart=Never -n $STAGING_NAMESPACE -- \
            sh -c "
            echo 'Testing internal service connectivity...'
            echo '1. Product Service:'
            curl -s -o /dev/null -w 'Status: %{http_code}\n' http://product-service-w10-aks:8000/health || echo 'Failed'
            echo '2. Order Service:'
            curl -s -o /dev/null -w 'Status: %{http_code}\n' http://order-service-w10-aks:8001/health || echo 'Failed'
            echo '3. Customer Service:'
            curl -s -o /dev/null -w 'Status: %{http_code}\n' http://customer-service-w10-aks:8002/health || echo 'Failed'
            echo '4. Frontend:'
            curl -s -o /dev/null -w 'Status: %{http_code}\n' http://frontend-w10-aks:80/ || echo 'Failed'
            echo '5. Testing service intercommunication:'
            echo '   Product -> DB: ' && curl -s http://product-service-w10-aks:8000/health | grep -o '\"database\":\"[^\"]*\"' || echo 'DB check failed'
            echo '   Order -> DB: ' && curl -s http://order-service-w10-aks:8001/health | grep -o '\"database\":\"[^\"]*\"' || echo 'DB check failed'
            echo '   Customer -> DB: ' && curl -s http://customer-service-w10-aks:8002/health | grep -o '\"database\":\"[^\"]*\"' || echo 'DB check failed'
            "

      - name: Check RabbitMQ Status
        run: |
          echo "üîç Checking RabbitMQ status..."

          kubectl get pod -l app=rabbitmq -n $STAGING_NAMESPACE

          echo "üìÑ RabbitMQ recent logs:"
          kubectl logs -l app=rabbitmq -n $STAGING_NAMESPACE --tail=20 | grep -i "connection\|connected\|error" | tail -10 || echo "No relevant RabbitMQ logs found"

          echo "üîç Testing RabbitMQ connectivity from Order Service..."
          ORDER_POD=$(kubectl get pod -l app=order-service -n $STAGING_NAMESPACE -o jsonpath='{.items[0].metadata.name}')
          kubectl exec $ORDER_POD -n $STAGING_NAMESPACE -- \
            sh -c "nc -z rabbitmq-service-w10-aks 5672 && echo '‚úÖ RabbitMQ port 5672 is reachable' || { echo '‚ùå RabbitMQ port 5672 not reachable'; exit 1; }"

      - name: Deployment Summary
        run: |
          echo "üéâ Staging Deployment Summary"
          echo "=============================="
          echo "Namespace: $STAGING_NAMESPACE"
          echo "Cluster: $AKS_NAME"
          echo "Image Tag: $IMAGE_TAG"
          echo ""
          echo "üì¶ Deployed Services:"
          kubectl get deployments -n $STAGING_NAMESPACE
          echo ""
          echo "üîó Services:"
          kubectl get svc -n $STAGING_NAMESPACE
          echo ""
          echo "‚úÖ All services deployed successfully to staging environment!"

      - name: Cleanup
        if: always()
        run: |
          echo "üßπ Cleaning up staging namespace..."
          kubectl delete namespace $STAGING_NAMESPACE --ignore-not-found=true
