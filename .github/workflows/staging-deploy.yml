name: Stage 2 - Staging Deployment

on:
  workflow_run:
    workflows: ["CI Pipeline - Testing Branch"]
    types:
      - completed
    branches:
      - testing

jobs:
  staging-deployment:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    env:
      RESOURCE_GROUP: teddysit722Week10
      AKS_NAME: aksteddy722Week10
      ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
      IMAGE_TAG: ${{ github.event.workflow_run.head_sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Connect to AKS
        run: |
          echo "Connecting to AKS cluster..."
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME
          kubectl cluster-info

      - name: Create Staging Namespace
        run: |
          STAGING_NAMESPACE="staging-${{ github.run_id }}"
          kubectl create namespace $STAGING_NAMESPACE || echo "Namespace already exists"
          echo "STAGING_NAMESPACE=$STAGING_NAMESPACE" >> $GITHUB_ENV

      - name: Deploy Backend Services
        run: |
          for service in customer_service order_service product_service; do
            K8S_NAME=$(echo $service | sed 's/_/-/g')
            if [ -d "k8s/$service" ]; then
              kubectl apply -f k8s/$service/ -n $STAGING_NAMESPACE
            else
              kubectl create deployment $K8S_NAME --image=$ACR_LOGIN_SERVER/$service:$IMAGE_TAG -n $STAGING_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
              kubectl expose deployment $K8S_NAME --port=80 --target-port=80 --name=$K8S_NAME-service -n $STAGING_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
            fi
            kubectl set image deployment/$K8S_NAME $K8S_NAME=$ACR_LOGIN_SERVER/$service:$IMAGE_TAG -n $STAGING_NAMESPACE || true
          done

      - name: Deploy Frontend
        run: |
          if [ -d "k8s/frontend" ]; then
            kubectl apply -f k8s/frontend/ -n $STAGING_NAMESPACE
          else
            kubectl create deployment frontend --image=$ACR_LOGIN_SERVER/frontend:$IMAGE_TAG -n $STAGING_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
            kubectl expose deployment frontend --port=80 --target-port=80 --name=frontend-service -n $STAGING_NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          fi
          kubectl set image deployment/frontend frontend=$ACR_LOGIN_SERVER/frontend:$IMAGE_TAG -n $STAGING_NAMESPACE || true

      - name: Wait for All Deployments
        run: |
          DEPLOYMENTS=$(kubectl get deployments -n $STAGING_NAMESPACE -o jsonpath='{.items[*].metadata.name}')
          for dep in $DEPLOYMENTS; do
            kubectl rollout status deployment/$dep -n $STAGING_NAMESPACE --timeout=300s
          done

      - name: Display Environment
        run: |
          kubectl get deployments,services,pods -n $STAGING_NAMESPACE -o wide

      - name: Test Services
        run: |
          echo "Testing frontend via port-forward..."
          kubectl port-forward service/frontend-service 8080:80 -n $STAGING_NAMESPACE &
          PID=$!
          sleep 10
          if curl -f -s http://localhost:8080 >/dev/null 2>&1; then
            echo "✅ Frontend responding"
          else
            echo "⚠️ Frontend not responding"
          fi
          kill $PID || true

          BACKENDS=("customer-service" "order-service" "product-service")
          for svc in "${BACKENDS[@]}"; do
            POD=$(kubectl get pods -n $STAGING_NAMESPACE -l app.kubernetes.io/name=$svc -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
            if [ -n "$POD" ]; then
              kubectl wait --for=condition=ready pod/$POD -n $STAGING_NAMESPACE --timeout=120s
              echo "✅ $svc pod is ready"
            else
              echo "⚠️ $svc pod not found"
            fi
          done

      - name: Acceptance Report
        run: |
          echo "✅ All deployments created and ready"
          echo "Namespace: $STAGING_NAMESPACE"
          echo "Services: frontend, customer_service, order_service, product_service"

      - name: Cleanup
        if: always()
        run: |
          kubectl delete namespace $STAGING_NAMESPACE --ignore-not-found=true
          echo "✅ Staging namespace cleaned"
